From 4fbcfa506e0a361c7d3ef1a80a3fc56b53908be4 Mon Sep 17 00:00:00 2001
From: TomateDeveloper <ianfe@martina.com.co>
Date: Wed, 11 Sep 2019 21:55:22 -0500
Subject: [PATCH] Created guice implementation


diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
index 2e5ae4fb..0da1fcd2 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
@@ -7,6 +7,7 @@ import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.logging.Logger;
 import lombok.Getter;
+import me.fixeddev.inject.ProtectedModule;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.config.ConfigurationAdapter;
 import net.md_5.bungee.api.scheduler.GroupedThreadFactory;
@@ -15,7 +16,7 @@ import net.md_5.bungee.api.scheduler.GroupedThreadFactory;
  * Represents any Plugin that may be loaded at runtime to enhance existing
  * functionality.
  */
-public class Plugin
+public class Plugin extends ProtectedModule
 {
 
     @Getter
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index 884f78c8..ac49dcd4 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -25,6 +25,7 @@ import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.logging.Level;
 import lombok.RequiredArgsConstructor;
+import me.fixeddev.inject.ProtectedModule;
 import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.CommandSender;
 import net.md_5.bungee.api.ProxyServer;
@@ -40,7 +41,7 @@ import org.yaml.snakeyaml.introspector.PropertyUtils;
  * example event handling and plugin management.
  */
 @RequiredArgsConstructor
-public class PluginManager
+public class PluginManager extends ProtectedModule
 {
 
     /*========================================================================*/
@@ -497,4 +498,14 @@ public class PluginManager
     {
         return Collections.unmodifiableCollection( commandMap.entrySet() );
     }
+
+
+    @Override
+    public void configure()
+    {
+        for ( Plugin plugin : plugins.values() )
+        {
+            install( plugin );
+        }
+    }
 }
diff --git a/pom.xml b/pom.xml
index eff0bf2e..d95679fe 100644
--- a/pom.xml
+++ b/pom.xml
@@ -117,6 +117,18 @@
             <version>3.0.1</version>
             <scope>provided</scope>
         </dependency>
+        <dependency>
+            <groupId>com.google.inject</groupId>
+            <artifactId>guice</artifactId>
+            <version>4.0</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>com.google.inject.extensions</groupId>
+            <artifactId>guice-multibindings</artifactId>
+            <version>4.0</version>
+            <scope>compile</scope>
+        </dependency>
         <dependency>
             <groupId>org.projectlombok</groupId>
             <artifactId>lombok</artifactId>
diff --git a/protocol/pom.xml b/protocol/pom.xml
index 2493fc17..064bab8c 100644
--- a/protocol/pom.xml
+++ b/protocol/pom.xml
@@ -52,6 +52,18 @@
             <version>${netty.version}</version>
             <scope>compile</scope>
         </dependency>
+        <dependency>
+            <groupId>com.google.inject</groupId>
+            <artifactId>guice</artifactId>
+            <version>4.0</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>com.google.inject.extensions</groupId>
+            <artifactId>guice-multibindings</artifactId>
+            <version>4.0</version>
+            <scope>compile</scope>
+        </dependency>
         <dependency>
             <groupId>net.sf.trove4j</groupId>
             <artifactId>core</artifactId>
diff --git a/protocol/src/main/java/me/fixeddev/inject/ForwardingBinder.java b/protocol/src/main/java/me/fixeddev/inject/ForwardingBinder.java
new file mode 100644
index 00000000..ce5c527e
--- /dev/null
+++ b/protocol/src/main/java/me/fixeddev/inject/ForwardingBinder.java
@@ -0,0 +1,181 @@
+package me.fixeddev.inject;
+
+import java.lang.annotation.Annotation;
+import java.lang.reflect.Method;
+
+import com.google.inject.Binder;
+import com.google.inject.Binding;
+import com.google.inject.Key;
+import com.google.inject.MembersInjector;
+import com.google.inject.Module;
+import com.google.inject.PrivateBinder;
+import com.google.inject.Provider;
+import com.google.inject.Scope;
+import com.google.inject.Stage;
+import com.google.inject.TypeLiteral;
+import com.google.inject.binder.AnnotatedBindingBuilder;
+import com.google.inject.binder.AnnotatedConstantBindingBuilder;
+import com.google.inject.binder.LinkedBindingBuilder;
+import com.google.inject.matcher.Matcher;
+import com.google.inject.spi.Dependency;
+import com.google.inject.spi.Message;
+import com.google.inject.spi.ModuleAnnotatedMethodScanner;
+import com.google.inject.spi.ProvisionListener;
+import com.google.inject.spi.TypeConverter;
+import com.google.inject.spi.TypeListener;
+import org.aopalliance.intercept.MethodInterceptor;
+
+public interface ForwardingBinder extends Binder {
+
+    Binder forwardedBinder();
+
+    @Override
+    default void bindInterceptor(Matcher<? super Class<?>> classMatcher, Matcher<? super Method> methodMatcher, MethodInterceptor... interceptors) {
+        forwardedBinder().bindInterceptor(classMatcher, methodMatcher, interceptors);
+    }
+
+    @Override
+    default void bindScope(Class<? extends Annotation> annotationType, Scope scope) {
+        forwardedBinder().bindScope(annotationType, scope);
+    }
+
+    @Override
+    default <T> LinkedBindingBuilder<T> bind(Key<T> key) {
+        return forwardedBinder().bind(key);
+    }
+
+    @Override
+    default <T> AnnotatedBindingBuilder<T> bind(TypeLiteral<T> typeLiteral) {
+        return forwardedBinder().bind(typeLiteral);
+    }
+
+    @Override
+    default <T> AnnotatedBindingBuilder<T> bind(Class<T> type) {
+        return forwardedBinder().bind(type);
+    }
+
+    @Override
+    default AnnotatedConstantBindingBuilder bindConstant() {
+        return forwardedBinder().bindConstant();
+    }
+
+    @Override
+    default <T> void requestInjection(TypeLiteral<T> type, T instance) {
+        forwardedBinder().requestInjection(type, instance);
+    }
+
+    @Override
+    default void requestInjection(Object instance) {
+        forwardedBinder().requestInjection(instance);
+    }
+
+    @Override
+    default void requestStaticInjection(Class<?>... types) {
+        forwardedBinder().requestStaticInjection(types);
+    }
+
+    @Override
+    default void install(Module module) {
+        forwardedBinder().install(module);
+    }
+
+    @Override
+    default Stage currentStage() {
+        return forwardedBinder().currentStage();
+    }
+
+    @Override
+    default void addError(String message, Object... arguments) {
+        forwardedBinder().addError(message, arguments);
+    }
+
+    @Override
+    default void addError(Throwable t) {
+        forwardedBinder().addError(t);
+    }
+
+    @Override
+    default void addError(Message message) {
+        forwardedBinder().addError(message);
+    }
+
+    @Override
+    default <T> Provider<T> getProvider(Key<T> key) {
+        return forwardedBinder().getProvider(key);
+    }
+
+    @Override
+    default <T> Provider<T> getProvider(Dependency<T> dependency) {
+        return forwardedBinder().getProvider(dependency);
+    }
+
+    @Override
+    default <T> Provider<T> getProvider(Class<T> type) {
+        return forwardedBinder().getProvider(type);
+    }
+
+    @Override
+    default <T> MembersInjector<T> getMembersInjector(TypeLiteral<T> typeLiteral) {
+        return forwardedBinder().getMembersInjector(typeLiteral);
+    }
+
+    @Override
+    default <T> MembersInjector<T> getMembersInjector(Class<T> type) {
+        return forwardedBinder().getMembersInjector(type);
+    }
+
+    @Override
+    default void convertToTypes(Matcher<? super TypeLiteral<?>> typeMatcher, TypeConverter converter) {
+        forwardedBinder().convertToTypes(typeMatcher, converter);
+    }
+
+    @Override
+    default void bindListener(Matcher<? super TypeLiteral<?>> typeMatcher, TypeListener listener) {
+        forwardedBinder().bindListener(typeMatcher, listener);
+    }
+
+    @Override
+    default void bindListener(Matcher<? super Binding<?>> bindingMatcher, ProvisionListener... listeners) {
+        forwardedBinder().bindListener(bindingMatcher, listeners);
+    }
+
+    @Override
+    default Binder withSource(Object source) {
+        return forwardedBinder().withSource(source);
+    }
+
+    @Override
+    default Binder skipSources(Class... classesToSkip) {
+        return forwardedBinder().skipSources(classesToSkip);
+    }
+
+    @Override
+    default PrivateBinder newPrivateBinder() {
+        return forwardedBinder().newPrivateBinder();
+    }
+
+    @Override
+    default void requireExplicitBindings() {
+        forwardedBinder().requireExplicitBindings();
+    }
+
+    @Override
+    default void disableCircularProxies() {
+        forwardedBinder().disableCircularProxies();
+    }
+
+    @Override
+    default void requireAtInjectOnConstructors() {
+        forwardedBinder().requireAtInjectOnConstructors();
+    }
+
+    @Override
+    default void requireExactBindingAnnotations() {
+        forwardedBinder().requireExactBindingAnnotations();
+    }
+
+    @Override
+    default void scanModulesForAnnotatedMethods(ModuleAnnotatedMethodScanner scanner) {
+        forwardedBinder().scanModulesForAnnotatedMethods(scanner);
+    }
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/me/fixeddev/inject/ForwardingPrivateBinder.java b/protocol/src/main/java/me/fixeddev/inject/ForwardingPrivateBinder.java
new file mode 100644
index 00000000..d34a7961
--- /dev/null
+++ b/protocol/src/main/java/me/fixeddev/inject/ForwardingPrivateBinder.java
@@ -0,0 +1,36 @@
+package me.fixeddev.inject;
+
+import com.google.inject.Key;
+import com.google.inject.PrivateBinder;
+import com.google.inject.TypeLiteral;
+import com.google.inject.binder.AnnotatedElementBuilder;
+
+public interface ForwardingPrivateBinder extends ForwardingBinder, PrivateBinder {
+
+    PrivateBinder forwardedBinder();
+
+    @Override
+    default void expose(Key<?> key) {
+        forwardedBinder().expose(key);
+    }
+
+    @Override
+    default AnnotatedElementBuilder expose(Class<?> type) {
+        return forwardedBinder().expose(type);
+    }
+
+    @Override
+    default AnnotatedElementBuilder expose(TypeLiteral<?> type) {
+        return forwardedBinder().expose(type);
+    }
+
+    @Override
+    default PrivateBinder withSource(Object source) {
+        return forwardedBinder().withSource(source);
+    }
+
+    @Override
+    default PrivateBinder skipSources(Class... classesToSkip) {
+        return forwardedBinder().skipSources(classesToSkip);
+    }
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/me/fixeddev/inject/ForwardingProtectedBinder.java b/protocol/src/main/java/me/fixeddev/inject/ForwardingProtectedBinder.java
new file mode 100644
index 00000000..7bb8510f
--- /dev/null
+++ b/protocol/src/main/java/me/fixeddev/inject/ForwardingProtectedBinder.java
@@ -0,0 +1,24 @@
+package me.fixeddev.inject;
+
+import com.google.inject.Binder;
+
+public interface ForwardingProtectedBinder extends ProtectedBinder, ForwardingPrivateBinder {
+
+    @Override
+    ProtectedBinder forwardedBinder();
+
+    @Override
+    default Binder publicBinder() {
+        return forwardedBinder().publicBinder();
+    }
+
+    @Override
+    default ProtectedBinder withSource(Object source) {
+        return forwardedBinder().withSource(source);
+    }
+
+    @Override
+    default ProtectedBinder skipSources(Class... classesToSkip) {
+        return forwardedBinder().skipSources(classesToSkip);
+    }
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/me/fixeddev/inject/ProtectedBinder.java b/protocol/src/main/java/me/fixeddev/inject/ProtectedBinder.java
new file mode 100644
index 00000000..43f10baf
--- /dev/null
+++ b/protocol/src/main/java/me/fixeddev/inject/ProtectedBinder.java
@@ -0,0 +1,31 @@
+package me.fixeddev.inject;
+
+import com.google.inject.Binder;
+
+/**
+ * A {@link com.google.inject.PrivateBinder} that provides direct access to the enclosing
+ * environment through {@link #publicBinder()}. This is the same environment that you create
+ * bindings in by calling {@link #expose}, but access to the binder itself offers more flexibility.
+ *
+ * {@link ProtectedBinder}s are created by calling {@link #newProtectedBinder(Binder)}.
+ *
+ * @see ProtectedModule
+ */
+public interface ProtectedBinder extends ForwardingPrivateBinder {
+
+    Binder publicBinder();
+
+    default ProtectedBinder withSource(Object source) {
+        return new ProtectedBinderImpl(publicBinder().withSource(source),
+                forwardedBinder().withSource(source));
+    }
+
+    default ProtectedBinder skipSources(Class... classesToSkip) {
+        return new ProtectedBinderImpl(publicBinder().skipSources(classesToSkip),
+                forwardedBinder().skipSources(classesToSkip));
+    }
+
+    static ProtectedBinder newProtectedBinder(Binder parent) {
+        return new ProtectedBinderImpl(parent, parent.newPrivateBinder());
+    }
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/me/fixeddev/inject/ProtectedBinderImpl.java b/protocol/src/main/java/me/fixeddev/inject/ProtectedBinderImpl.java
new file mode 100644
index 00000000..201b91a6
--- /dev/null
+++ b/protocol/src/main/java/me/fixeddev/inject/ProtectedBinderImpl.java
@@ -0,0 +1,71 @@
+package me.fixeddev.inject;
+
+import com.google.inject.Binder;
+import com.google.inject.Module;
+import com.google.inject.PrivateBinder;
+
+public class ProtectedBinderImpl implements ProtectedBinder {
+
+    private static Class[] SKIP = new Class[]{
+            ForwardingBinder.class,
+            ForwardingPrivateBinder.class,
+            ForwardingProtectedBinder.class,
+            ProtectedBinder.class,
+            ProtectedBinderImpl.class,
+            ProtectedModule.class
+    };
+
+    private final Binder global;
+    private final PrivateBinder local;
+
+    ProtectedBinderImpl(Binder global, PrivateBinder local) {
+        this.global = global.skipSources(SKIP);
+        this.local = (local instanceof ProtectedBinder ? ((ProtectedBinder) local).forwardedBinder() : local).skipSources(SKIP);
+    }
+
+    @Override
+    public PrivateBinder forwardedBinder() {
+        return local;
+    }
+
+    @Override
+    public Binder publicBinder() {
+        return global;
+    }
+
+    /**
+     * This hack is used to pass the current {@link ProtectedBinder} through Guice
+     * when installing a {@link ProtectedModule}. Guice will pass its own {@link Binder}
+     * to {@link ProtectedModule#configure(Binder)}, and we use this thread-local
+     * to get the {@link ProtectedBinder} wrapping it.
+     *
+     * We could try and implement the install process ourselves, but then we would miss out
+     * on Guice's module functionality, such as deduplication, error tracing, and so on.
+     */
+
+    private static final ThreadLocal<ProtectedBinderImpl> CURRENT = new ThreadLocal<>();
+
+    @Override
+    public void install(Module module) {
+        final ProtectedBinderImpl prev = CURRENT.get();
+        CURRENT.set(this);
+        try {
+            local.install(module);
+        } finally {
+            CURRENT.set(prev);
+        }
+    }
+
+    public static ProtectedBinder current(Binder binder) {
+        if(binder instanceof ProtectedBinder) {
+            return (ProtectedBinder) binder;
+        }
+
+        final ProtectedBinderImpl current = ProtectedBinderImpl.CURRENT.get();
+        if(current != null && current.local == binder) {
+            return current;
+        }
+
+        return null;
+    }
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/me/fixeddev/inject/ProtectedModule.java b/protocol/src/main/java/me/fixeddev/inject/ProtectedModule.java
new file mode 100644
index 00000000..3a316c4b
--- /dev/null
+++ b/protocol/src/main/java/me/fixeddev/inject/ProtectedModule.java
@@ -0,0 +1,80 @@
+package me.fixeddev.inject;
+
+import com.google.inject.Binder;
+import com.google.inject.Module;
+
+/**
+ * A {@link Module} that uses a {@link ProtectedBinder}.
+ *
+ * This module must be installed through a {@link ProtectedBinder}, which must be created explicitly
+ * by calling {@link ProtectedBinder#newProtectedBinder(Binder)}. Attempting to install this module
+ * into a normal {@link Binder} fails with an error.
+ *
+ * Unlike {@link com.google.inject.PrivateModule}, installing this never creates a new {@link ProtectedBinder}
+ * automatically. This allows an entire tree of {@link ProtectedModule}s to share the same public binder.
+ *
+ * @see ProtectedBinder
+ */
+public abstract class ProtectedModule implements Module, ForwardingProtectedBinder {
+
+    protected void configure() {}
+
+    private final Object moduleKey;
+    private ProtectedBinder binder;
+
+    protected ProtectedModule(Object moduleKey) {
+        this.moduleKey = moduleKey;
+    }
+
+    protected ProtectedModule() {
+        this(null);
+    }
+
+    @Override
+    public int hashCode() {
+        return moduleKey != null ? moduleKey.hashCode()
+                : super.hashCode();
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if(moduleKey != null) {
+            return obj != null &&
+                    getClass().equals(obj.getClass()) &&
+                    moduleKey.equals(((ProtectedModule) obj).moduleKey);
+        } else {
+            return super.equals(obj);
+        }
+    }
+
+    @Override
+    public final ProtectedBinder forwardedBinder() {
+        return binder();
+    }
+
+    protected final ProtectedBinder binder() {
+        if(binder == null) {
+            throw new IllegalStateException("Binder is only usable during configuration");
+        }
+        return binder;
+    }
+
+    @Override
+    public final void configure(Binder binder) {
+        final ProtectedBinder old = this.binder;
+        this.binder = ProtectedBinderImpl.current(binder);
+        try {
+            if(this.binder != null) {
+                configure();
+            } else {
+                binder.skipSources(ProtectedModule.class).addError(
+                        ProtectedModule.class.getSimpleName() +
+                                " must be installed with a " +
+                                ProtectedBinder.class.getSimpleName()
+                );
+            }
+        } finally {
+            this.binder = old;
+        }
+    }
+}
\ No newline at end of file
diff --git a/protocol/src/main/java/me/fixeddev/inject/package-info.java b/protocol/src/main/java/me/fixeddev/inject/package-info.java
new file mode 100644
index 00000000..6578966d
--- /dev/null
+++ b/protocol/src/main/java/me/fixeddev/inject/package-info.java
@@ -0,0 +1,4 @@
+package me.fixeddev.inject;
+/*
+ * This was taken from OvercastNetwork/ProjectAres/Utils and OvercastNetwork/minecraft-api
+ */
\ No newline at end of file
diff --git a/protocol/src/main/java/me/fixeddev/minecraft/CommandSender.java b/protocol/src/main/java/me/fixeddev/minecraft/CommandSender.java
new file mode 100644
index 00000000..247ac08f
--- /dev/null
+++ b/protocol/src/main/java/me/fixeddev/minecraft/CommandSender.java
@@ -0,0 +1,51 @@
+package me.fixeddev.minecraft;
+
+public interface CommandSender {
+
+    /**
+     * Gets the name of this command sender
+     *
+     * @return Name of the sender
+     */
+    String getName();
+
+    /**
+     * Sends this sender a message
+     *
+     * @param message Message to be displayed
+     */
+    void sendMessage(String message);
+
+    /**
+     * Sends this sender multiple messages
+     *
+     * @param messages An array of messages to be displayed
+     */
+    void sendMessage(String[] messages);
+
+    /**
+     * Sends the component to the player
+     *
+     * @param component the components to send
+     */
+    void sendMessage(net.md_5.bungee.api.chat.BaseComponent component);
+
+    /**
+     * Sends an array of components as a single message to the player
+     *
+     * @param components the components to send
+     */
+    void sendMessage(net.md_5.bungee.api.chat.BaseComponent... components);
+
+    /**
+     * Gets the value of the specified permission, if set.
+     * <p>
+     * If a permission override is not set on this object, the default value
+     * of the permission will be returned.
+     *
+     * @param name Name of the permission
+     * @return Value of the permission
+     */
+    boolean hasPermission(String name);
+
+}
diff --git a/protocol/src/main/java/me/fixeddev/minecraft/config/Configuration.java b/protocol/src/main/java/me/fixeddev/minecraft/config/Configuration.java
new file mode 100644
index 00000000..513b513f
--- /dev/null
+++ b/protocol/src/main/java/me/fixeddev/minecraft/config/Configuration.java
@@ -0,0 +1,43 @@
+package me.fixeddev.minecraft.config;
+
+import java.util.Collection;
+
+public interface Configuration {
+
+    /**
+     * Gets an integer from the specified path.
+     *
+     * @param path the path to retrieve the integer from
+     * @param def the default value
+     * @return the retrieved integer
+     */
+    int getInt(String path, int def);
+
+    /**
+     * Gets a string from the specified path.
+     *
+     * @param path the path to retrieve the string from.
+     * @param def the default value
+     * @return the retrieved string
+     */
+    String getString(String path, String def);
+
+    /**
+     * Gets a boolean from the specified path.
+     *
+     * @param path the path to retrieve the boolean form.
+     * @param def the default value
+     * @return the retrieved boolean
+     */
+    boolean getBoolean(String path, boolean def);
+
+    /**
+     * Get a list from the specified path.
+     *
+     * @param path the path to retrieve the list form.
+     * @param def the default value
+     * @return the retrieved list
+     */
+    Collection<?> getList(String path, Collection<?> def);
+
+}
diff --git a/protocol/src/main/java/me/fixeddev/minecraft/player/Player.java b/protocol/src/main/java/me/fixeddev/minecraft/player/Player.java
new file mode 100644
index 00000000..8b6bf43e
--- /dev/null
+++ b/protocol/src/main/java/me/fixeddev/minecraft/player/Player.java
@@ -0,0 +1,54 @@
+package me.fixeddev.minecraft.player;
+
+import me.fixeddev.minecraft.CommandSender;
+
+import java.net.InetSocketAddress;
+import java.util.UUID;
+
+public interface Player extends CommandSender {
+
+    /**
+     * Get this player's UUID.
+     *
+     * @return the UUID
+     */
+    UUID getUniqueId();
+
+    /**
+     * Gets the "friendly" name to display of this player. This may include
+     * color.
+     * <p>
+     * Note that this name will not be displayed in game, only in chat and
+     * places defined by plugins.
+     *
+     * @return the friendly name
+     */
+     String getDisplayName();
+
+    /**
+     * Sets the "friendly" name to display of this player. This may include
+     * color.
+     * <p>
+     * Note that this name will not be displayed in game, only in chat and
+     * places defined by plugins.
+     *
+     * @param name The new display name.
+     */
+     void setDisplayName(String name);
+
+    /**
+     * Gets the remote address of this connection.
+     *
+     * @return the remote address
+     */
+    InetSocketAddress getAddress();
+
+
+    /**
+     * Says a message (or runs a command).
+     *
+     * @param msg message to print
+     */
+    void chat(String msg);
+
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 8acdc22d..19d0be2b 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -9,6 +9,9 @@ import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
+import com.google.inject.Guice;
+import com.google.inject.Injector;
+import com.google.inject.Stage;
 import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.github.waterfallmc.waterfall.conf.WaterfallConfiguration;
 import io.netty.bootstrap.ServerBootstrap;
@@ -97,6 +100,11 @@ import net.md_5.bungee.util.CaseInsensitiveMap;
 public class BungeeCord extends ProxyServer
 {
 
+    /**
+     * Injector
+     */
+    public Injector injector;
+
     /**
      * Current operation state.
      */
@@ -278,8 +286,12 @@ public class BungeeCord extends ProxyServer
 
         isRunning = true;
 
+        injector = Guice.createInjector(Stage.PRODUCTION, pluginManager);
+        injector.injectMembers(this);
+
         pluginManager.enablePlugins();
 
+
         if ( config.getThrottle() > 0 )
         {
             connectionThrottle = new ConnectionThrottle( config.getThrottle(), config.getThrottleLimit() );
-- 
2.22.0.windows.1

